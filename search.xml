<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Flutter ffi: 引入并使用第三方C/C++静态库和动态库.md</title>
    <url>/2024/11/30/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/flutter-ffi-use-third-party-libraries/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>废话少说，先上代码：<br><a href="https://github.com/lloumei/flutter_examples/tree/main/ffi/ffi_with_other_lib">https://github.com/lloumei/flutter_examples/tree/main/ffi/ffi_with_other_lib</a></p>
</blockquote>
<p>在日常开发过程中，很多时候需要对接第三方的功能服务，而第三方为了保密一般情况下只会提供接口文档和已经打包好的库文件，我们需要集成第三方的库文件到自己的项目中。Flutter的dart:ffi可以调用C&#x2F;C++本地代码，但是官方只提供了调用C&#x2F;C++源代码的示例，也没有详细说明如何使用第三方库，网上也没有找到相关详细的教程，所以在这里我记录一下自己在Flutter工程中引入并使用第三方C&#x2F;C++静态库和动态库的方式。</p>
<h2 id="编译测试静态库和动态库"><a href="#编译测试静态库和动态库" class="headerlink" title="编译测试静态库和动态库"></a>编译测试静态库和动态库</h2><p>正式开始测试前，我们先要准备测试所需的静态库和动态库文件。在这里，我准备了两个简单的测试C语言工程：</p>
<ul>
<li>test_static</li>
<li>test_shared</li>
</ul>
<p>测试工程中仅包含一个c文件和一个头文件，以及两个编译脚本，分别用来构建Android平台和IOS平台的库文件。</p>
<h3 id="准备编译环境"><a href="#准备编译环境" class="headerlink" title="准备编译环境"></a>准备编译环境</h3><p>由于需要同时测试Android和IOS两个平台，我使用了苹果电脑来作为开发机器，电脑CPU为M2。</p>
<p>电脑需要安装好Xcode，以及Android开发相关的SDK和NDK，在这里NDK选择了r19c版本。</p>
<h3 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h3><p>编译Android的测试静态库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> test_static</span><br><span class="line"><span class="built_in">export</span> ANDROID_NDK=/your/android/ndk/path</span><br><span class="line"><span class="built_in">export</span> NDK_PLATFORM=darwin-x86_64</span><br><span class="line">./build_android.sh  </span><br></pre></td></tr></table></figure>

<p>编译Android的测试动态库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> test_shared</span><br><span class="line"><span class="built_in">export</span> ANDROID_NDK=/your/android/ndk/path</span><br><span class="line"><span class="built_in">export</span> NDK_PLATFORM=darwin-x86_64</span><br><span class="line">./build_android.sh</span><br></pre></td></tr></table></figure>

<p>编译IOS的测试静态库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> test_static</span><br><span class="line">./build_ios.sh  </span><br></pre></td></tr></table></figure>

<h2 id="工程引用库文件"><a href="#工程引用库文件" class="headerlink" title="工程引用库文件"></a>工程引用库文件</h2><p>编译好测试静态库和动态库后，需要将库文件引入到工程中。</p>
<h3 id="Android工程引用"><a href="#Android工程引用" class="headerlink" title="Android工程引用"></a>Android工程引用</h3><p>将 test_static 和 test_shared 文件夹下的 output&#x2F;android&#x2F;jniLibs 文件夹合并复制到 android&#x2F;src&#x2F;main&#x2F;jniLibs ，文件结构如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jniLibs</span><br><span class="line">├── arm64-v8a</span><br><span class="line">│   ├── include</span><br><span class="line">│   │   ├── test_shared.h</span><br><span class="line">│   │   └── test_static.h</span><br><span class="line">│   ├── libtest_shared.so</span><br><span class="line">│   └── libtest_static.a</span><br><span class="line">├── armeabi-v7a</span><br><span class="line">│   ├── include</span><br><span class="line">│   │   ├── test_shared.h</span><br><span class="line">│   │   └── test_static.h</span><br><span class="line">│   ├── libtest_shared.so</span><br><span class="line">│   └── libtest_static.a</span><br><span class="line">├── x86</span><br><span class="line">│   ├── include</span><br><span class="line">│   │   ├── test_shared.h</span><br><span class="line">│   │   └── test_static.h</span><br><span class="line">│   ├── libtest_shared.so</span><br><span class="line">│   └── libtest_static.a</span><br><span class="line">└── x86_64</span><br><span class="line">    ├── include</span><br><span class="line">    │   ├── test_shared.h</span><br><span class="line">    │   └── test_static.h</span><br><span class="line">    ├── libtest_shared.so</span><br><span class="line">    └── libtest_static.a</span><br></pre></td></tr></table></figure>

<p>回到根目录下的 src 文件夹，编辑 CMakeLists.txt 文件，添加库文件依赖：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/../android/src/main/jniLibs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(libtest_shared SHARED IMPORTED)</span><br><span class="line"><span class="keyword">set_target_properties</span>(libtest_shared PROPERTIES IMPORTED_LOCATION <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/../android/src/main/jniLibs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libtest_shared.so)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(libtest_static STATIC IMPORTED)</span><br><span class="line"><span class="keyword">set_target_properties</span>(libtest_static PROPERTIES IMPORTED_LOCATION <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/../android/src/main/jniLibs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libtest_static.a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(</span><br><span class="line">  test_ffi</span><br><span class="line">  <span class="variable">$&#123;LIB-LOG&#125;</span></span><br><span class="line">  libtest_shared</span><br><span class="line">  libtest_static</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个 CMakeLists.txt 只有Android工程使用到，所以不做区分平台的操作。</p>
<h3 id="IOS工程引用"><a href="#IOS工程引用" class="headerlink" title="IOS工程引用"></a>IOS工程引用</h3><p>将 test_static 文件夹下的 output&#x2F;ios&#x2F;libtest_static.xcframework 复制到 ios&#x2F;Frameworks&#x2F;libtest_static.xcframework ，如果 Frameworks 文件夹不存在就创建一个。</p>
<p>编辑 ios 文件夹下的 .podspec 文件：</p>
<figure class="highlight podspec"><table><tr><td class="code"><pre><span class="line">s.vendored_frameworks = [</span><br><span class="line"><span class="string">&#x27;Frameworks/libtest_static.xcframework&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="使用库文件方法"><a href="#使用库文件方法" class="headerlink" title="使用库文件方法"></a>使用库文件方法</h2><p>创建ffi工程的时候，src文件夹下默认自带一个c文件和头文件，我们以这两个文件为入口，添加自己的方法实现。</p>
<p>修改头文件，添加方法声明：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">FFI_PLUGIN_EXPORT <span class="type">const</span> <span class="type">char</span> * <span class="title function_">platform</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">FFI_PLUGIN_EXPORT <span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">FFI_PLUGIN_EXPORT <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br></pre></td></tr></table></figure>

<p>然后修改c文件，添加方法的实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test_static.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(ANDROID) || defined(_ANDROID_)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test_shared.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">FFI_PLUGIN_EXPORT <span class="type">const</span> <span class="type">char</span> * <span class="title function_">platform</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(ANDROID) || defined(_ANDROID_)</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;ANDROID&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined(__APPLE__) || defined(TARGET_OS_IPHONE) || defined(TARGET_IPHONE_SIMULATOR)</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;IOS&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;OTHER&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FFI_PLUGIN_EXPORT <span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(ANDROID) || defined(_ANDROID_)</span></span><br><span class="line">  <span class="keyword">return</span> test_shared_min(a, b);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FFI_PLUGIN_EXPORT <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> test_static_max(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>由于IOS不支持动态库引用，所以上面的c文件需要使用宏判断平台来决定是否使用测试动态库。</p>
<h3 id="使用ffigen生成Dart代码"><a href="#使用ffigen生成Dart代码" class="headerlink" title="使用ffigen生成Dart代码"></a>使用ffigen生成Dart代码</h3><p>在Mac中使用ffigen生成Dart代码时会有很多警告，导致代码生成失败：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">warning: pointer is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified) [Nullability Issue]</span><br></pre></td></tr></table></figure>

<p>所以我们需要修改一下工程根目录下的 ffigen.yaml 文件，目的是禁用上面的警告：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">compiler-opts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;-Wno-nullability-completeness&quot;</span>   <span class="comment"># 在苹果系统编译会报错：https://juejin.cn/post/6934524023342628877</span></span><br></pre></td></tr></table></figure>

<p>然后用以下命令来生成代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dart run ffigen --config ffigen.yaml</span><br></pre></td></tr></table></figure>

<h3 id="在Dart中使用原生库功能"><a href="#在Dart中使用原生库功能" class="headerlink" title="在Dart中使用原生库功能"></a>在Dart中使用原生库功能</h3><p>最后我们在Dart中就可以使用测试静态库和动态库的方法了：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:async&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:ffi&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:io&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:isolate&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:ffi/ffi.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;test_ffi_bindings_generated.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">String</span> _libName = <span class="string">&#x27;test_ffi&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">The dynamic library in which the symbols for [TestFfiBindings] can be found.</span></span></span><br><span class="line"><span class="keyword">final</span> DynamicLibrary _dylib = () &#123;</span><br><span class="line">  <span class="keyword">if</span> (Platform.isMacOS || Platform.isIOS) &#123;</span><br><span class="line">    <span class="keyword">return</span> DynamicLibrary.open(<span class="string">&#x27;<span class="subst">$_libName</span>.framework/<span class="subst">$_libName</span>&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (Platform.isAndroid || Platform.isLinux) &#123;</span><br><span class="line">    <span class="comment">// DynamicLibrary.open(&#x27;libtest_shared.so&#x27;);</span></span><br><span class="line">    <span class="keyword">return</span> DynamicLibrary.open(<span class="string">&#x27;lib<span class="subst">$_libName</span>.so&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (Platform.isWindows) &#123;</span><br><span class="line">    <span class="keyword">return</span> DynamicLibrary.open(<span class="string">&#x27;<span class="subst">$_libName</span>.dll&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> UnsupportedError(<span class="string">&#x27;Unknown platform: <span class="subst">$&#123;Platform.operatingSystem&#125;</span>&#x27;</span>);</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">The bindings to the native functions in [<span class="emphasis">_dylib].</span></span></span></span><br><span class="line"><span class="keyword">final</span> TestFfiBindings _bindings = TestFfiBindings(_dylib);</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> platform() &#123;</span><br><span class="line">  Pointer&lt;Char&gt; p = _bindings.platform();</span><br><span class="line">  <span class="keyword">return</span> p.cast&lt;Utf8&gt;().toDartString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> min(<span class="built_in">int</span> a, <span class="built_in">int</span> b) =&gt; _bindings.min(a, b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> max(<span class="built_in">int</span> a, <span class="built_in">int</span> b) =&gt; _bindings.max(a, b);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://dev.to/leehack/how-to-use-golang-in-flutter-application-golang-ffi-1950">How to use GoLang in Flutter Application - Golang FFI</a></li>
<li><a href="https://medium.com/flutter-community/using-ffi-on-flutter-plugins-to-run-native-rust-code-d64c0f14f9c2">Using FFI on Flutter Plugins to run native Rust code</a></li>
<li><a href="https://medium.com/@magdy.zamel/the-architecture-mismatch-dilemma-b72adf2db374">The Architecture Mismatch Dilemma in iOS: Solving the ‘Could Not Find Module *** for Target x86_64-apple-ios-simulator’ Issue on Apple Silicon</a></li>
<li><a href="https://github.com/dart-lang/native/issues/934">Using dart:ffi with a xcframework containing static binaries (iOS)</a></li>
<li><a href="https://forums.developer.apple.com/forums/thread/673387">Simulator ARM64 Support for Static Libraries in M1 Machines</a></li>
<li><a href="https://developer.apple.com/forums/thread/666335?answerId=685927022#685927022">Both ios-arm64-simulator and ios-x86_64-simulator represent two equivalent library definitions</a></li>
</ul>
]]></content>
      <categories>
        <category>移动开发</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>android</tag>
        <tag>ios</tag>
      </tags>
  </entry>
</search>
